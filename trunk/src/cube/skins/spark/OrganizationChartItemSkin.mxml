<?xml version="1.0" encoding="utf-8"?>
<s:Skin xmlns:fx="http://ns.adobe.com/mxml/2009" 
		xmlns:s="library://ns.adobe.com/flex/spark" 
		xmlns:mx="library://ns.adobe.com/flex/mx"
		xmlns:supportClasses="cube.spark.components.supportClasses.*"
		xmlns:fb="http://ns.adobe.com/flashbuilder/2009"
		implements="cube.spark.components.supportClasses.IOrganizationChartItemSkin"
		creationComplete="skin_creationCompleteHandler(event)">
	<!-- host component -->
	<fx:Metadata>
		[HostComponent("cube.spark.components.supportClasses.OrganizationChartItem")]
	</fx:Metadata>
	<fx:Script>
		<![CDATA[
			import cube.spark.components.supportClasses.IOrganizationChartItemSkin;
			
			import mx.events.FlexEvent;
			
			public function get entryPoint():HierarchicalConnector {
				return entryPointConnector;
			}
			
			public function get exitPoint():HierarchicalConnector {
				return exitPointConnector;
			}

			protected function skin_creationCompleteHandler(event:FlexEvent):void {
				hostComponent.addEventListener("collapsedChange", hostComponent_collapsedChangeHandler, false, 0, true);
			}
			
			protected function hostComponent_collapsedChangeHandler(event:Event):void {
				updateDisplayList(unscaledWidth, unscaledHeight);
			}

		]]>
	</fx:Script>
	<fx:Script fb:purpose="styling">
		<![CDATA[ 
			import mx.events.StateChangeEvent;
			
			/**
			 *  @private
			 */
			override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number) : void
			{
				var cr:Number = getStyle("cornerRadius");
				
				cornerRadius = cr;
				shadow.radiusX = cornerRadius;
				fill.radiusX = cornerRadius;
				lowlight.radiusX = cornerRadius;
				highlight.radiusX = cornerRadius;
				border.radiusX = cornerRadius;
				openButton.setStyle("cornerRadius", cornerRadius);
				(openButton.skin as OrganizationChartItemButtonSkin).collapsed = hostComponent.collapsed;
				
				if (highlightStroke) highlightStroke.radiusX = cornerRadius;
				if (hldownstroke1) hldownstroke1.radiusX = cornerRadius;
				if (hldownstroke2) hldownstroke2.radiusX = cornerRadius;
				
				super.updateDisplayList(unscaledWidth, unscaledHeight);
			}
			
			private var cornerRadius:Number = 12;
		]]>        
	</fx:Script>
	<fx:Declarations>
		<supportClasses:HierarchicalConnector id="entryPointConnector" orientation="top" viewport="{this}" x="50%" y="0" />
		<supportClasses:HierarchicalConnector id="exitPointConnector" orientation="bottom" viewport="{this}" x="50%" y="{hostComponent.height}" />
	</fx:Declarations>
	<s:states>
		<s:State name="minimizedUp" stateGroups="up,minimized" />
		<s:State name="normalUp" stateGroups="up,normal" />
		<s:State name="maximizedUp" stateGroups="up,maximized" />
		<s:State name="minimizedOver" stateGroups="over,minimized" />
		<s:State name="normalOver" stateGroups="over,normal" />
		<s:State name="maximizedOver" stateGroups="over,maximized" />
		<s:State name="minimizedDown" stateGroups="down,minimized" />
		<s:State name="normalDown" stateGroups="down,normal" />
		<s:State name="maximizedDown" stateGroups="down,maximized" />
		<s:State name="minimizedDisabled" stateGroups="disabled,minimized" />
		<s:State name="normalDisabled" stateGroups="disabled,normal" />
		<s:State name="maximizedDisabled" stateGroups="disabled,maximized" />
	</s:states>
	
	<!-- layer 1: shadow -->
	<!--- @private -->
	<s:Rect id="shadow" left="-1" right="-1" top="-1" bottom="-1" radiusX="2">
		<s:fill>
			<s:LinearGradient rotation="90">
				<s:GradientEntry color="0x000000" 
								 color.down="0xFFFFFF"
								 alpha="0.01"
								 alpha.down="0" />
				<s:GradientEntry color="0x000000" 
								 color.down="0xFFFFFF" 
								 alpha="0.07"
								 alpha.down="0.5" />
			</s:LinearGradient>
		</s:fill>
	</s:Rect>
	
	<!-- layer 2: fill -->
	<!--- @private -->
	<s:Rect id="fill" left="1" right="1" top="1" bottom="1" radiusX="2">
		<s:fill>
			<s:LinearGradient rotation="90">
				<s:GradientEntry color="0xFFFFFF" 
								 color.over="0xEEEFEF" 
								 color.down="0xAAAAAA" 
								 alpha="0.85" />
				<s:GradientEntry color="0xD8D8D8" 
								 color.over="0xC8C9CA" 
								 color.down="0x929496" 
								 alpha="0.85" />
			</s:LinearGradient>
		</s:fill>
	</s:Rect>
	
	<!-- layer 3: fill lowlight -->
	<!--- @private -->
	<s:Rect id="lowlight" left="1" right="1" top="1" bottom="1" radiusX="2">
		<s:fill>
			<s:LinearGradient rotation="270">
				<s:GradientEntry color="0x000000" ratio="0.0" alpha="0.0627" />
				<s:GradientEntry color="0x000000" ratio="0.48" alpha="0.0099" />
				<s:GradientEntry color="0x000000" ratio="0.48001" alpha="0" />
			</s:LinearGradient>
		</s:fill>
	</s:Rect>
	
	<!-- layer 4: fill highlight -->
	<!--- @private -->
	<s:Rect id="highlight" left="1" right="1" top="1" bottom="1" radiusX="2">
		<s:fill>
			<s:LinearGradient rotation="90">
				<s:GradientEntry color="0xFFFFFF"
								 ratio="0.0"
								 alpha="0.33" 
								 alpha.over="0.22" 
								 alpha.down="0.12"/>
				<s:GradientEntry color="0xFFFFFF"
								 ratio="0.48"
								 alpha="0.33"
								 alpha.over="0.22"
								 alpha.down="0.12" />
				<s:GradientEntry color="0xFFFFFF"
								 ratio="0.48001"
								 alpha="0" />
			</s:LinearGradient>
		</s:fill>
	</s:Rect>
	
	<!-- layer 5: highlight stroke (all states except down) -->
	<!--- @private -->
	<s:Rect id="highlightStroke" left="1" right="1" top="1" bottom="1" radiusX="2" excludeFrom="down">
		<s:stroke>
			<s:LinearGradientStroke rotation="90" weight="1">
				<s:GradientEntry color="0xFFFFFF" alpha.over="0.22" />
				<s:GradientEntry color="0xD8D8D8" alpha.over="0.22" />
			</s:LinearGradientStroke>
		</s:stroke>
	</s:Rect>
	
	<!-- layer 6: highlight stroke (down state only) -->
	<!--- @private -->
	<s:Rect id="hldownstroke1" left="1" right="1" top="1" bottom="1" radiusX="2" includeIn="down">
		<s:stroke>
			<s:LinearGradientStroke rotation="90" weight="1">
				<s:GradientEntry color="0x000000" alpha="0.25" ratio="0.0" />
				<s:GradientEntry color="0x000000" alpha="0.25" ratio="0.001" />
				<s:GradientEntry color="0x000000" alpha="0.07" ratio="0.0011" />
				<s:GradientEntry color="0x000000" alpha="0.07" ratio="0.965" />
				<s:GradientEntry color="0x000000" alpha="0.00" ratio="0.9651" />
			</s:LinearGradientStroke>
		</s:stroke>
	</s:Rect>
	<!--- @private -->
	<s:Rect id="hldownstroke2" left="2" right="2" top="2" bottom="2" radiusX="2" includeIn="down">
		<s:stroke>
			<s:LinearGradientStroke rotation="90" weight="1">
				<s:GradientEntry color="0x000000" alpha="0.09" ratio="0.0" />
				<s:GradientEntry color="0x000000" alpha="0.00" ratio="0.0001" />
			</s:LinearGradientStroke>
		</s:stroke>
	</s:Rect>
	
	<!-- layer 7: border - put on top of the fill so it doesn't disappear when scale is less than 1 -->
	<!--- @private -->
	<s:Rect id="border" left="0" right="0" top="0" bottom="0" width="69" height="20" radiusX="2">
		<s:stroke>
			<s:LinearGradientStroke rotation="90" weight="1">
				<s:GradientEntry color="0x000000" 
								 alpha="0.5625"
								 alpha.down="0.6375" />
				<s:GradientEntry color="0x000000" 
								 alpha="0.75" 
								 alpha.down="0.85" />
			</s:LinearGradientStroke>
		</s:stroke>
	</s:Rect>
	
	<!-- layer 8: text -->
	<!--- @copy spark.components.supportClasses.ButtonBase#labelDisplay -->
	<s:Button id="openButton" left="0" right="0" height="18" bottom="0" focusEnabled="false"
			  skinClass="cube.skins.spark.OrganizationChartItemButtonSkin"
			  visible="{hostComponent.hasChildren}" />
	<s:Label id="labelDisplay"
			 text="{hostComponent.label}"
			 textAlign="center"
			 verticalAlign="middle"
			 maxDisplayedLines="1"
			 rotation="0"
			 rotation.minimized="90"
			 horizontalCenter="-1"
			 left="2" right="2" top="6" bottom="18">
	</s:Label>
</s:Skin>
